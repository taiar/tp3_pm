package Gui.Screens;

import Database.Database;
import Gui.Windows.MainWindow;
import competicoes.CampeonatoBrasileiro;
import equipes.*;
import tabela.CelulaTabelaCompeticao;
import tabela.CelulaTabelaCompeticaoFutebol;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;

/**
 * Tela de formul√°rio de cadastro do Campeonato Brasileiro.
 */
public class CadastroCampeonatoBrasileiro extends AbstractScreen {
    private JTextField nomeCampeonato;
    private JPanel cadastroCampeonato;
    private JComboBox<EquipeDeFutebol> selecaoEquipes;
    private JTable equipesSelecionadas;
    private JButton inserirEquipeNoCampeonatoButton;
    private JButton cadastrarCampeonatoButton;
    private DefaultTableModel dadosTabelaEquipes;

    public CadastroCampeonatoBrasileiro() {
        this.selecaoEquipes.setModel(new DefaultComboBoxModel<EquipeDeFutebol>(
                this.vectorFromArrayList(Database.get().EquipeDeFutebol.getRegistros())
        ));

        String[] colunas = new String[]{"Nome da equipe"};
        this.dadosTabelaEquipes = new DefaultTableModel(null, colunas);
        this.equipesSelecionadas.setModel(this.dadosTabelaEquipes);
        this.inserirEquipeNoCampeonatoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dadosTabelaEquipes.addRow(new String[]{selecaoEquipes.getItemAt(selecaoEquipes.getSelectedIndex()).getNome()});
            }
        });

        this.cadastrarCampeonatoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CampeonatoBrasileiro campeonato = new CampeonatoBrasileiro(nomeCampeonato.getText());
                ArrayList<CelulaTabelaCompeticaoFutebol> times = new ArrayList<CelulaTabelaCompeticaoFutebol>();
                for (EquipeDeFutebol equipe : Database.get().EquipeDeFutebol.getRegistros()) {
                    Vector<String> camposDaTabela = new Vector<String>();
                    for (int i = 0; i < camposDaTabela.size(); i += 1) {
                        if (camposDaTabela.elementAt(i) == equipe.getNome()) {
                            CelulaTabelaCompeticaoFutebol adicionaNaTabela = new CelulaTabelaCompeticaoFutebol(equipe);
                            times.add(adicionaNaTabela);
                        }
                    }
                }
                campeonato.adicionaEquipesATabela(times);
                Database.get().CampeonatoBrasileiro.adicionaRegistro(campeonato);
                Database.get().CampeonatoBrasileiro.persiste();
                JOptionPane.showMessageDialog(null, "Novo campeonato cadastrado com sucesso!");
                MainWindow.get().atualizarTela();
            }
        });
        this.main.add(this.cadastroCampeonato);
    }

    private Vector<EquipeDeFutebol> vectorFromArrayList(ArrayList<EquipeDeFutebol> list) {
        Vector<EquipeDeFutebol> v = new Vector<EquipeDeFutebol>();
        for (EquipeDeFutebol e : list) {
            v.add(e);
        }
        return v;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        cadastroCampeonato = new JPanel();
        cadastroCampeonato.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Cadastro de Campeonato Brasileiro");
        cadastroCampeonato.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Nome:");
        cadastroCampeonato.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nomeCampeonato = new JTextField();
        nomeCampeonato.setText("");
        cadastroCampeonato.add(nomeCampeonato, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        selecaoEquipes = new JComboBox();
        selecaoEquipes.setEditable(true);
        cadastroCampeonato.add(selecaoEquipes, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inserirEquipeNoCampeonatoButton = new JButton();
        inserirEquipeNoCampeonatoButton.setText("Inserir equipe no campeonato");
        cadastroCampeonato.add(inserirEquipeNoCampeonatoButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cadastrarCampeonatoButton = new JButton();
        cadastrarCampeonatoButton.setText("Cadastrar campeonato");
        cadastroCampeonato.add(cadastrarCampeonatoButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        cadastroCampeonato.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        equipesSelecionadas = new JTable();
        scrollPane1.setViewportView(equipesSelecionadas);
        final JLabel label3 = new JLabel();
        label3.setText("Equipes:");
        cadastroCampeonato.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return cadastroCampeonato;
    }
}
