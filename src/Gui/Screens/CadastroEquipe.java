package Gui.Screens;

import Database.Database;
import Gui.Windows.MainWindow;
import equipes.Equipe;
import equipes.EquipeDeFutebol;
import esportes.Esporte;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * Tela de formul√°rio de cadastro de uma equipe.
 */
public class CadastroEquipe extends AbstractScreen {

    private JPanel cadastroEquipe;
    private JTextField nomeEquipe;
    private JComboBox<Esporte.TipoDeEsporte> esporte;
    private JButton cadastrarEquipeButton;
    private JTable tabelaResultados;
    private DefaultTableModel tabelaResultadosModel;

    public CadastroEquipe() {
        this.esporte.setModel(new DefaultComboBoxModel<Esporte.TipoDeEsporte>(Esporte.TipoDeEsporte.values()));
        cadastrarEquipeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (Esporte.TipoDeEsporte.values()[esporte.getSelectedIndex()] == Esporte.TipoDeEsporte.Futebol) {
                    EquipeDeFutebol novaEquipe = new EquipeDeFutebol(nomeEquipe.getText());
                    novaEquipe.setEsporte(Esporte.TipoDeEsporte.Futebol);
                    Database.get().EquipeDeFutebol.adicionaRegistro(novaEquipe);
                    Database.get().EquipeDeFutebol.persiste();
                } else {
                    Equipe novaEquipe = new Equipe();
                    novaEquipe.setEsporte(esporte.getItemAt(esporte.getSelectedIndex()));
                    novaEquipe.setNome(nomeEquipe.getText());
                    Database.get().Equipe.adicionaRegistro(novaEquipe);
                    Database.get().Equipe.persiste();
                }
                JOptionPane.showMessageDialog(null, "Equipe cadastrada com sucesso!");
                MainWindow.get().getTela().limpaCampos();
                MainWindow.get().getTela().atualizaModel();
            }
        });
        String[] colunas = new String[]{"Nome", "Esporte"};
        this.tabelaResultadosModel = new DefaultTableModel(this.dadosParaListagem(), colunas);
        this.tabelaResultados.setModel(this.tabelaResultadosModel);
        this.main.add(cadastroEquipe);
    }

    private String[][] dadosParaListagem() {
        ArrayList<String[]> dados = new ArrayList<String[]>();
        for (Equipe e : Database.get().Equipe.getRegistros()) {
            dados.add(new String[]{e.getNome(), e.getEsporte().toString()});
        }
        for (Equipe e : Database.get().EquipeDeFutebol.getRegistros()) {
            dados.add(new String[]{e.getNome(), e.getEsporte().toString()});
        }
        String[][] dadosString = new String[dados.size()][2];
        dadosString = dados.toArray(dadosString);
        return dadosString;
    }

    @Override
    public void limpaCampos() {
        this.nomeEquipe.setText("");
        this.esporte.setSelectedIndex(Esporte.TipoDeEsporte.Futebol.ordinal());
    }

    @Override
    public void atualizaModel() {
        MainWindow.get().atualizarTela();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        cadastroEquipe = new JPanel();
        cadastroEquipe.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Cadastrar nova equipe:");
        cadastroEquipe.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        esporte = new JComboBox();
        esporte.setEditable(true);
        cadastroEquipe.add(esporte, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nomeEquipe = new JTextField();
        nomeEquipe.setText("");
        cadastroEquipe.add(nomeEquipe, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Nome da equipe:");
        cadastroEquipe.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Esporte:");
        cadastroEquipe.add(label3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cadastrarEquipeButton = new JButton();
        cadastrarEquipeButton.setText("Cadastrar equipe");
        cadastroEquipe.add(cadastrarEquipeButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        cadastroEquipe.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tabelaResultados = new JTable();
        tabelaResultados.setEnabled(false);
        scrollPane1.setViewportView(tabelaResultados);
        final JSeparator separator1 = new JSeparator();
        cadastroEquipe.add(separator1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return cadastroEquipe;
    }
}
